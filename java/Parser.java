
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\007\005\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\007\000\002\010\003\000" +
    "\002\010\004\000\002\010\004\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\010\000\002\010\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\010\000\002\010\007\000\002\010\004\000\002\010" +
    "\003\000\002\010\012\000\002\010\011\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\006\006\000" +
    "\002\004\004\000\002\004\003\000\002\003\004\000\002" +
    "\003\003\000\002\002\005\000\002\002\005\000\002\005" +
    "\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\032\003\014\004\011\005\005\006\022\007" +
    "\010\010\016\011\004\013\007\025\013\030\020\034\015" +
    "\040\021\001\002\000\032\003\014\004\011\005\005\006" +
    "\022\007\010\010\016\011\004\013\007\025\013\030\020" +
    "\034\015\040\021\001\002\000\064\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\026\ufffd\027\ufffd\031\ufffd\033\ufffd\035\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\001\002\000\062\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5\031\uffe5\033\144" +
    "\037\uffe5\040\uffe5\041\uffe5\001\002\000\032\003\014\004" +
    "\011\005\005\006\022\007\010\010\016\011\004\013\007" +
    "\025\013\030\020\034\015\040\021\001\002\000\064\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb\027\ufffb\031\ufffb" +
    "\033\ufffb\035\ufffb\037\ufffb\040\ufffb\041\ufffb\001\002\000" +
    "\064\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\027\ufffe" +
    "\031\ufffe\033\ufffe\035\ufffe\037\ufffe\040\ufffe\041\ufffe\001" +
    "\002\000\052\002\142\004\011\005\005\006\022\007\010" +
    "\011\042\012\027\013\044\014\035\015\025\016\040\017" +
    "\032\020\036\021\030\022\033\023\045\024\034\033\037" +
    "\037\026\040\021\001\002\000\032\003\014\004\011\005" +
    "\005\006\022\007\010\010\016\011\004\013\007\025\013" +
    "\030\020\034\015\040\021\001\002\000\062\002\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\031\uffe0\033\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\001\002\000\014\004\011\005" +
    "\005\006\022\007\010\040\021\001\002\000\032\003\014" +
    "\004\011\005\005\006\022\007\010\010\016\011\004\013" +
    "\007\025\013\030\020\034\015\040\021\001\002\000\064" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\027\ufff9\031" +
    "\ufff9\033\ufff9\035\124\037\ufff9\040\ufff9\041\ufff9\001\002" +
    "\000\010\007\072\032\071\040\073\001\002\000\034\003" +
    "\014\004\011\005\005\006\022\007\010\010\016\011\004" +
    "\013\007\025\013\030\020\034\015\040\021\041\024\001" +
    "\002\000\064\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc" +
    "\027\ufffc\031\ufffc\033\ufffc\035\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\001\002\000\052\004\011\005\005\006\022\007\010" +
    "\011\042\012\027\013\044\014\035\015\025\016\040\017" +
    "\032\020\036\021\030\022\033\023\045\024\034\033\037" +
    "\037\026\040\021\041\031\001\002\000\064\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022" +
    "\uffff\023\uffff\024\uffff\026\uffff\027\uffff\031\uffff\033\uffff" +
    "\035\uffff\037\uffff\040\uffff\041\uffff\001\002\000\032\003" +
    "\014\004\011\005\005\006\022\007\010\010\016\011\004" +
    "\013\007\025\013\030\020\034\015\040\021\001\002\000" +
    "\032\003\014\004\011\005\005\006\022\007\010\010\016" +
    "\011\004\013\007\025\013\030\020\034\015\040\021\001" +
    "\002\000\032\003\014\004\011\005\005\006\022\007\010" +
    "\010\016\011\004\013\007\025\013\030\020\034\015\040" +
    "\021\001\002\000\032\003\014\004\011\005\005\006\022" +
    "\007\010\010\016\011\004\013\007\025\013\030\020\034" +
    "\015\040\021\001\002\000\064\002\000\004\000\005\000" +
    "\006\000\007\000\011\000\012\000\013\000\014\000\015" +
    "\000\016\000\017\000\020\000\021\000\022\000\023\000" +
    "\024\000\026\000\027\000\031\000\033\000\035\000\037" +
    "\000\040\000\041\000\001\002\000\032\003\014\004\011" +
    "\005\005\006\022\007\010\010\016\011\004\013\007\025" +
    "\013\030\020\034\015\040\021\001\002\000\032\003\014" +
    "\004\011\005\005\006\022\007\010\010\016\011\004\013" +
    "\007\025\013\030\020\034\015\040\021\001\002\000\032" +
    "\003\014\004\011\005\005\006\022\007\010\010\016\011" +
    "\004\013\007\025\013\030\020\034\015\040\021\001\002" +
    "\000\032\003\014\004\011\005\005\006\022\007\010\010" +
    "\016\011\004\013\007\025\013\030\020\034\015\040\021" +
    "\001\002\000\032\003\014\004\011\005\005\006\022\007" +
    "\010\010\016\011\004\013\007\025\013\030\020\034\015" +
    "\040\021\001\002\000\032\003\014\004\011\005\005\006" +
    "\022\007\010\010\016\011\004\013\007\025\013\030\020" +
    "\034\015\040\021\001\002\000\032\003\014\004\011\005" +
    "\005\006\022\007\010\010\016\011\004\013\007\025\013" +
    "\030\020\034\015\040\021\001\002\000\062\002\uffe6\004" +
    "\uffe6\005\005\006\022\007\010\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\031\uffe6\033\uffe6" +
    "\037\uffe6\040\021\041\uffe6\001\002\000\032\003\014\004" +
    "\011\005\005\006\022\007\010\010\016\011\004\013\007" +
    "\025\013\030\020\034\015\040\021\001\002\000\064\002" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\031\uffdb" +
    "\033\uffdb\035\050\037\uffdb\040\uffdb\041\uffdb\001\002\000" +
    "\032\003\014\004\011\005\005\006\022\007\010\010\016" +
    "\011\004\013\007\025\013\030\020\034\015\040\021\001" +
    "\002\000\032\003\014\004\011\005\005\006\022\007\010" +
    "\010\016\011\004\013\007\025\013\030\020\034\015\040" +
    "\021\001\002\000\062\002\ufff2\004\ufff2\005\005\006\022" +
    "\007\010\011\042\012\027\013\044\014\035\015\025\016" +
    "\040\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\026\ufff2\027\ufff2\031\ufff2\033\ufff2\037\ufff2\040\021\041" +
    "\ufff2\001\002\000\062\002\uffeb\004\uffeb\005\005\006\022" +
    "\007\010\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\025\016" +
    "\040\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\031\uffeb\033\uffeb\037\uffeb\040\021\041" +
    "\uffeb\001\002\000\004\040\051\001\002\000\032\003\014" +
    "\004\011\005\005\006\022\007\010\010\016\011\004\013" +
    "\007\025\013\030\020\034\015\040\021\001\002\000\052" +
    "\004\011\005\005\006\022\007\010\011\042\012\027\013" +
    "\044\014\035\015\025\016\040\017\032\020\036\021\030" +
    "\022\033\023\045\024\034\033\037\037\026\040\021\041" +
    "\053\001\002\000\064\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\026\ufffa\027\ufffa\031\ufffa\033\ufffa\035\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\001\002\000\062\002\ufff5\004\ufff5\005\005" +
    "\006\022\007\010\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\025\016\040\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\026\ufff5\027\ufff5\031\ufff5\033\ufff5\037\ufff5\040" +
    "\021\041\ufff5\001\002\000\064\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\027\uffdc\031\uffdc\033\uffdc\035\050\037" +
    "\uffdc\040\uffdc\041\uffdc\001\002\000\062\002\uffe9\004\uffe9" +
    "\005\005\006\022\007\010\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\026\uffe9\027\uffe9\031\uffe9\033\uffe9\037" +
    "\uffe9\040\021\041\uffe9\001\002\000\062\002\uffd9\004\uffd9" +
    "\005\005\006\022\007\010\011\042\012\027\013\044\014" +
    "\035\015\025\016\040\017\032\020\036\021\030\022\033" +
    "\023\045\024\034\026\uffd9\027\uffd9\031\uffd9\033\uffd9\037" +
    "\uffd9\040\021\041\uffd9\001\002\000\062\002\ufff3\004\ufff3" +
    "\005\005\006\022\007\010\011\042\012\027\013\044\014" +
    "\035\015\025\016\040\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\026\ufff3\027\ufff3\031\ufff3\033\ufff3\037" +
    "\ufff3\040\021\041\ufff3\001\002\000\062\002\uffec\004\uffec" +
    "\005\005\006\022\007\010\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\025\016\040\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\026\uffec\027\uffec\031\uffec\033\uffec\037" +
    "\uffec\040\021\041\uffec\001\002\000\062\002\ufff1\004\ufff1" +
    "\005\005\006\022\007\010\011\042\012\027\013\044\014" +
    "\035\015\025\016\040\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\026\ufff1\027\ufff1\031\ufff1\033\ufff1\037" +
    "\ufff1\040\021\041\ufff1\001\002\000\062\002\uffef\004\uffef" +
    "\005\005\006\022\007\010\011\042\012\027\013\044\014" +
    "\035\015\025\016\040\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\026\uffef\027\uffef\031\uffef\033\uffef\037" +
    "\uffef\040\021\041\uffef\001\002\000\062\002\ufff4\004\ufff4" +
    "\005\005\006\022\007\010\011\042\012\027\013\044\014" +
    "\035\015\025\016\040\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\026\ufff4\027\ufff4\031\ufff4\033\ufff4\037" +
    "\ufff4\040\021\041\ufff4\001\002\000\062\002\ufff0\004\ufff0" +
    "\005\005\006\022\007\010\011\042\012\027\013\044\014" +
    "\035\015\025\016\040\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\026\ufff0\027\ufff0\031\ufff0\033\ufff0\037" +
    "\ufff0\040\021\041\ufff0\001\002\000\062\002\ufff6\004\ufff6" +
    "\005\005\006\022\007\010\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\025\016\040\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\026\ufff6\027\ufff6\031\ufff6\033\ufff6\037" +
    "\ufff6\040\021\041\ufff6\001\002\000\062\002\uffe2\004\uffe2" +
    "\005\005\006\022\007\010\011\042\012\027\013\044\014" +
    "\035\015\025\016\040\017\032\020\036\021\030\022\033" +
    "\023\045\024\034\026\uffe2\027\uffe2\031\uffe2\033\037\037" +
    "\026\040\021\041\uffe2\001\002\000\062\002\uffea\004\uffea" +
    "\005\005\006\022\007\010\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\026\uffea\027\uffea\031\uffea\033\uffea\037" +
    "\uffea\040\021\041\uffea\001\002\000\004\007\114\001\002" +
    "\000\004\017\107\001\002\000\004\007\075\001\002\000" +
    "\006\033\100\041\101\001\002\000\004\033\076\001\002" +
    "\000\004\007\077\001\002\000\006\033\uffd7\041\uffd7\001" +
    "\002\000\004\007\106\001\002\000\004\017\102\001\002" +
    "\000\032\003\014\004\011\005\005\006\022\007\010\010" +
    "\016\011\004\013\007\025\013\030\020\034\015\040\021" +
    "\001\002\000\052\004\011\005\005\006\022\007\010\011" +
    "\042\012\027\013\044\014\035\015\025\016\040\017\032" +
    "\020\036\021\030\022\033\023\045\024\034\031\104\033" +
    "\037\037\026\040\021\001\002\000\032\003\014\004\011" +
    "\005\005\006\022\007\010\010\016\011\004\013\007\025" +
    "\013\030\020\034\015\040\021\001\002\000\062\002\uffe4" +
    "\004\011\005\005\006\022\007\010\011\042\012\027\013" +
    "\044\014\035\015\025\016\040\017\032\020\036\021\030" +
    "\022\033\023\045\024\034\026\uffe4\027\uffe4\031\uffe4\033" +
    "\037\037\026\040\021\041\uffe4\001\002\000\006\033\uffd8" +
    "\041\uffd8\001\002\000\032\003\014\004\011\005\005\006" +
    "\022\007\010\010\016\011\004\013\007\025\013\030\020" +
    "\034\015\040\021\001\002\000\052\004\011\005\005\006" +
    "\022\007\010\011\042\012\027\013\044\014\035\015\025" +
    "\016\040\017\032\020\036\021\030\022\033\023\045\024" +
    "\034\031\111\033\037\037\026\040\021\001\002\000\032" +
    "\003\014\004\011\005\005\006\022\007\010\010\016\011" +
    "\004\013\007\025\013\030\020\034\015\040\021\001\002" +
    "\000\062\002\uffe8\004\uffe8\005\005\006\022\007\010\011" +
    "\042\012\027\013\044\014\035\015\025\016\040\017\032" +
    "\020\036\021\030\022\033\023\045\024\034\026\uffe8\027" +
    "\uffe8\031\uffe8\033\037\037\026\040\021\041\uffe8\001\002" +
    "\000\004\031\122\001\002\000\004\007\116\001\002\000" +
    "\004\017\120\001\002\000\006\007\116\017\uffdd\001\002" +
    "\000\004\017\uffde\001\002\000\032\003\014\004\011\005" +
    "\005\006\022\007\010\010\016\011\004\013\007\025\013" +
    "\030\020\034\015\040\021\001\002\000\052\004\011\005" +
    "\005\006\022\007\010\011\042\012\027\013\044\014\035" +
    "\015\025\016\040\017\032\020\036\021\030\022\033\023" +
    "\045\024\034\031\uffdf\033\037\037\026\040\021\001\002" +
    "\000\032\003\014\004\011\005\005\006\022\007\010\010" +
    "\016\011\004\013\007\025\013\030\020\034\015\040\021" +
    "\001\002\000\062\002\uffe7\004\uffe7\005\005\006\022\007" +
    "\010\011\042\012\027\013\044\014\035\015\025\016\040" +
    "\017\032\020\036\021\030\022\033\023\045\024\034\026" +
    "\uffe7\027\uffe7\031\uffe7\033\037\037\026\040\021\041\uffe7" +
    "\001\002\000\004\040\125\001\002\000\032\003\014\004" +
    "\011\005\005\006\022\007\010\010\016\011\004\013\007" +
    "\025\013\030\020\034\015\040\021\001\002\000\052\004" +
    "\011\005\005\006\022\007\010\011\042\012\027\013\044" +
    "\014\035\015\025\016\040\017\032\020\036\021\030\022" +
    "\033\023\045\024\034\033\037\037\026\040\021\041\127" +
    "\001\002\000\066\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\026" +
    "\ufffa\027\ufffa\031\ufffa\033\ufffa\035\ufffa\036\130\037\ufffa" +
    "\040\ufffa\041\ufffa\001\002\000\032\003\014\004\011\005" +
    "\005\006\022\007\010\010\016\011\004\013\007\025\013" +
    "\030\020\034\015\040\021\001\002\000\062\002\uffe3\004" +
    "\uffe3\005\005\006\022\007\010\011\042\012\027\013\044" +
    "\014\035\015\025\016\040\017\032\020\036\021\030\022" +
    "\033\023\045\024\034\026\uffe3\027\uffe3\031\uffe3\033\037" +
    "\037\uffe3\040\021\041\uffe3\001\002\000\062\002\ufff8\004" +
    "\ufff8\005\005\006\022\007\010\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\026\ufff8\027\ufff8\031\ufff8\033\ufff8" +
    "\037\ufff8\040\021\041\ufff8\001\002\000\016\004\011\005" +
    "\005\006\022\007\010\035\050\040\021\001\002\000\064" +
    "\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1\027\uffe1\031" +
    "\uffe1\033\uffe1\035\050\037\uffe1\040\uffe1\041\uffe1\001\002" +
    "\000\052\004\011\005\005\006\022\007\010\011\042\012" +
    "\027\013\044\014\035\015\025\016\040\017\032\020\036" +
    "\021\030\022\033\023\045\024\034\026\136\033\037\037" +
    "\026\040\021\001\002\000\032\003\014\004\011\005\005" +
    "\006\022\007\010\010\016\011\004\013\007\025\013\030" +
    "\020\034\015\040\021\001\002\000\052\004\011\005\005" +
    "\006\022\007\010\011\042\012\027\013\044\014\035\015" +
    "\025\016\040\017\032\020\036\021\030\022\033\023\045" +
    "\024\034\027\140\033\037\037\026\040\021\001\002\000" +
    "\032\003\014\004\011\005\005\006\022\007\010\010\016" +
    "\011\004\013\007\025\013\030\020\034\015\040\021\001" +
    "\002\000\062\002\uffee\004\uffee\005\005\006\022\007\010" +
    "\011\042\012\027\013\044\014\035\015\025\016\040\017" +
    "\032\020\036\021\030\022\033\023\045\024\034\026\uffee" +
    "\027\uffee\031\uffee\033\037\037\uffee\040\021\041\uffee\001" +
    "\002\000\004\002\001\001\002\000\062\002\uffed\004\uffed" +
    "\005\005\006\022\007\010\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\026\uffed\027\uffed\031\uffed\033\uffed\037" +
    "\uffed\040\021\041\uffed\001\002\000\032\003\014\004\011" +
    "\005\005\006\022\007\010\010\016\011\004\013\007\025" +
    "\013\030\020\034\015\040\021\001\002\000\062\002\uffda" +
    "\004\uffda\005\005\006\022\007\010\011\042\012\027\013" +
    "\044\014\035\015\025\016\040\017\032\020\036\021\030" +
    "\022\033\023\045\024\034\026\uffda\027\uffda\031\uffda\033" +
    "\uffda\037\uffda\040\021\041\uffda\001\002\000\062\002\ufff7" +
    "\004\ufff7\005\005\006\022\007\010\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7\031\ufff7\033" +
    "\ufff7\037\ufff7\040\021\041\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\010\002\005\007\016\010\011\001\001\000" +
    "\010\002\005\007\016\010\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\005\007\016\010\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\040" +
    "\007\042\001\001\000\010\002\005\007\016\010\134\001" +
    "\001\000\002\001\001\000\004\007\132\001\001\000\010" +
    "\002\005\007\016\010\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\005\007\016\010\022\001\001" +
    "\000\002\001\001\000\006\003\040\007\042\001\001\000" +
    "\002\001\001\000\010\002\005\007\016\010\067\001\001" +
    "\000\010\002\005\007\016\010\066\001\001\000\010\002" +
    "\005\007\016\010\065\001\001\000\010\002\005\007\016" +
    "\010\064\001\001\000\002\001\001\000\010\002\005\007" +
    "\016\010\063\001\001\000\010\002\005\007\016\010\062" +
    "\001\001\000\010\002\005\007\016\010\061\001\001\000" +
    "\010\002\005\007\016\010\060\001\001\000\010\002\005" +
    "\007\016\010\057\001\001\000\010\002\005\007\016\010" +
    "\056\001\001\000\010\002\005\007\016\010\055\001\001" +
    "\000\004\007\054\001\001\000\010\002\005\007\016\010" +
    "\053\001\001\000\002\001\001\000\010\002\005\007\016" +
    "\010\046\001\001\000\010\002\005\007\016\010\045\001" +
    "\001\000\006\003\040\007\042\001\001\000\006\003\040" +
    "\007\042\001\001\000\002\001\001\000\010\002\005\007" +
    "\016\010\051\001\001\000\006\003\040\007\042\001\001" +
    "\000\002\001\001\000\006\003\040\007\042\001\001\000" +
    "\002\001\001\000\006\003\040\007\042\001\001\000\006" +
    "\003\040\007\042\001\001\000\006\003\040\007\042\001" +
    "\001\000\006\003\040\007\042\001\001\000\006\003\040" +
    "\007\042\001\001\000\006\003\040\007\042\001\001\000" +
    "\006\003\040\007\042\001\001\000\006\003\040\007\042" +
    "\001\001\000\006\003\040\007\042\001\001\000\006\003" +
    "\040\007\042\001\001\000\006\003\040\007\042\001\001" +
    "\000\004\006\112\001\001\000\002\001\001\000\004\005" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\005\007\016\010\102\001\001\000\006" +
    "\003\040\007\042\001\001\000\010\002\005\007\016\010" +
    "\104\001\001\000\006\003\040\007\042\001\001\000\002" +
    "\001\001\000\010\002\005\007\016\010\107\001\001\000" +
    "\006\003\040\007\042\001\001\000\010\002\005\007\016" +
    "\010\111\001\001\000\006\003\040\007\042\001\001\000" +
    "\002\001\001\000\004\004\114\001\001\000\002\001\001" +
    "\000\004\004\116\001\001\000\002\001\001\000\010\002" +
    "\005\007\016\010\120\001\001\000\006\003\040\007\042" +
    "\001\001\000\010\002\005\007\016\010\122\001\001\000" +
    "\006\003\040\007\042\001\001\000\002\001\001\000\010" +
    "\002\005\007\016\010\125\001\001\000\006\003\040\007" +
    "\042\001\001\000\002\001\001\000\010\002\005\007\016" +
    "\010\130\001\001\000\006\003\040\007\042\001\001\000" +
    "\006\003\040\007\042\001\001\000\004\007\133\001\001" +
    "\000\002\001\001\000\006\003\040\007\042\001\001\000" +
    "\010\002\005\007\016\010\136\001\001\000\006\003\040" +
    "\007\042\001\001\000\010\002\005\007\016\010\140\001" +
    "\001\000\006\003\040\007\042\001\001\000\002\001\001" +
    "\000\006\003\040\007\042\001\001\000\010\002\005\007" +
    "\016\010\144\001\001\000\006\003\040\007\042\001\001" +
    "\000\006\003\040\007\042\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return l.next_token(); 
    }


    Lexer l;
    public Parser(Lexer l){
	   this.l = l;
    }

    class Pair<A,B> {
        A left;
        B right;

        Pair(A left, B right) {
            this.left = left;
            this.right = right;
        }
    }

    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // simple_exp ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // simple_exp ::= LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new Unit(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // simple_exp ::= BOOL 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean b = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bool(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // simple_exp ::= INT 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Int(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // simple_exp ::= FLOAT 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float f = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Float(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simple_exp ::= IDENT 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_exp ::= simple_exp DOT LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Get(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= simple_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= NOT exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if (e instanceof Float) {
        RESULT = new Float(-((Float) e).f);
    } else {
        RESULT = new Neg(e);
    }
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Add(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sub(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp EQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Eq(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp LESS_GREATER exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(new Eq(e1, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp LESS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(new LE(e2, e1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp GREATER exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(new LE(e1, e2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp LESS_EQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LE(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp GREATER_EQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LE(e2, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= MINUS_DOT exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FNeg(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp PLUS_DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FAdd(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp MINUS_DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FSub(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp AST_DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FMul(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp SLASH_DOT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FDiv(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= LET IDENT EQUAL exp IN exp 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Let(id, Type.gen(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= LET REC fundef IN exp 
            {
              Exp RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FunDef fd = (FunDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LetRec(fd,  e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp actual_args 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new App(e, es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= elems 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Tuple(es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LET LPAREN pat RPAREN EQUAL exp IN exp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Pair<List<Id>,List<Type>> p = (Pair<List<Id>,List<Type>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
       RESULT = new LetTuple(p.left, p.right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= simple_exp DOT LPAREN exp RPAREN LESS_MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Put(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp SEMICOLON exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Let(Id.gen(), new TUnit(), e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= ARRAY_CREATE simple_exp simple_exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Array(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= error 
            {
              Exp RESULT =null;
		 RESULT = null; /* TODO */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fundef ::= IDENT formal_args EQUAL exp 
            {
              FunDef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id name = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Id> args = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunDef(name, null, args, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundef",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // formal_args ::= IDENT formal_args 
            {
              List<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Id> args = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 args.add(0, id); RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_args",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal_args ::= IDENT 
            {
              List<Id> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List l = new LinkedList<Id>(); 
      l.add(0, id); 
      RESULT = l; 
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_args",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // actual_args ::= actual_args simple_exp 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_args",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // actual_args ::= simple_exp 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List l = new LinkedList<Exp>(); l.add(0, e); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_args",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elems ::= elems COMMA exp 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elems",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elems ::= exp COMMA exp 
            {
              List<Exp> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List l = new LinkedList<Exp>(); 
       l.add(0, e2); 
       l.add(0, e1);
       RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elems",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pat ::= pat COMMA IDENT 
            {
              Pair<List<Id>,List<Type>> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pair<List<Id>,List<Type>> is = (Pair<List<Id>,List<Type>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 is.left.add(i); RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pat ::= IDENT COMMA IDENT 
            {
              Pair<List<Id>,List<Type>> RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id i1 = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id i2 = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Id> l = new LinkedList<Id>(); 
        List<Type> t = new LinkedList<Type>(); 
        t.add(0, Type.gen()); t.add(0, Type.gen());
        l.add(0, i2); 
        l.add(0, i1); RESULT = new Pair<List<Id>, List<Type>>(l, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
